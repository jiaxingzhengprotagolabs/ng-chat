{"version":3,"sources":["ng://ng-chat/ng-chat/core/chat-adapter.ts","ng://ng-chat/ng-chat/core/message-type.enum.ts","ng://ng-chat/ng-chat/core/message.ts","ng://ng-chat/ng-chat/core/user-status.enum.ts","ng://ng-chat/ng-chat/core/user.ts","ng://ng-chat/ng-chat/core/window.ts","node_modules/tslib/tslib.es6.js","ng://ng-chat/ng-chat/core/paged-history-chat-adapter.ts","ng://ng-chat/ng-chat/core/theme.enum.ts","ng://ng-chat/ng-chat/core/scroll-direction.enum.ts","ng://ng-chat/ng-chat/core/default-file-upload-adapter.ts","ng://ng-chat/ng-chat/ng-chat.component.ts","ng://ng-chat/ng-chat/pipes/emojify.pipe.ts","ng://ng-chat/ng-chat/pipes/linkfy.pipe.ts","ng://ng-chat/ng-chat/ng-chat.module.ts"],"names":["ChatAdapter","this","friendsListChangedHandler","users","messageReceivedHandler","user","message","prototype","onFriendsListChanged","onMessageReceived","Text","File","Message","type","MessageType","Online","Busy","Away","Offline","User","Window","messages","newMessage","isCollapsed","isLoadingHistory","hasFocus","hasMoreMessages","historyPage","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","n","v","step","op","TypeError","call","done","value","pop","length","push","e","PagedHistoryChatAdapter","__extends","__","constructor","create","tslib_1.__extends","Custom","Light","Dark","Top","Bottom","DefaultFileUploadAdapter","_serverEndpointUrl","_http","uploadFile","file","userTo","formData","FormData","append","id","name","post","NgChat","sanitizer","_httpClient","UserStatus","maximizeWindowOnNewMessage","pollFriendsList","pollingInterval","historyEnabled","emojisEnabled","linkfyEnabled","audioEnabled","searchEnabled","audioSource","persistWindowsState","title","messagePlaceholder","searchPlaceholder","browserNotificationsEnabled","browserNotificationIconSource","browserNotificationTitle","historyPageSize","hideFriendsList","hideFriendsListOnUnsupportedViewport","theme","Theme","onUserClicked","EventEmitter","onUserChatOpened","onUserChatClosed","onMessagesSeen","browserNotificationsBootstrapped","hasPagedHistory","statusDescription","online","busy","away","offline","searchInput","windowSizeFactor","friendsListWidth","unsupportedViewport","isUploadingFile","windows","isBootstrapped","defineProperty","userId","_this","filter","x","displayName","toUpperCase","includes","ngOnInit","bootstrapChat","onResize","event","viewPortTotalArea","target","innerWidth","NormalizeWindows","maxSupportedOpenedWindows","Math","floor","difference","splice","updateWindowsState","initializationException","adapter","window","initializeTheme","initializeDefaultText","initializeBrowserNotifications","msg","fetchFriendsList","setInterval","bufferAudioFile","fileUploadUrl","fileUploadAdapter","ex","console","error","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","result","then","apply","Notification","requestPermission","_a","localization","loadMessageHistoryPlaceholder","customTheme","Error","isBootstrapping","listFriends","pipe","map","subscribe","restoreWindowsState","fetchMessageHistory","getMessageHistoryByPage","chattingTo","forEach","assertMessageType","concat","direction","ScrollDirection","setTimeout","onFetchMessageHistoryLoaded","getMessageHistory","forceMarkMessagesAsSeen","scrollChatWindow","unseenMessages","m","seenOn","markMessagesAsRead","emit","chatWindow","openChatWindow","emitMessageSound","emitBrowserNotification","focusOnNewWindow","invokedByUserClick","openedWindow","find","collapseWindow","newChatWindow","unshift","focusOnWindow","callback","windowIndex","indexOf","chatWindowInputs","toArray","nativeElement","focus","windowIndex_1","chatMessageClusters","element","position","scrollHeight","scrollTop","currentDate","Date","audioFile","Audio","src","load","play","notification_1","icon","close","usersIds","w","localStorage","setItem","localStorageKey","JSON","stringify","stringfiedUserIds","getItem","userIds_1","parse","u","getClosestWindow","index","unreadMessagesTotal","totalUnreadMessages","fromId","String","unreadMessagesTotalByUser","onChatInputTyped","keyCode","trim","toId","sendMessage","preventDefault","currentWindowIndex","messageInputToFocus","shiftKey","closestWindow","onCloseChatWindow","onChatTitleClicked","onChatWindowClicked","isAvatarVisible","toggleWindowFocus","unreadMessages","getStatusTitle","status","currentStatus","toString","toLowerCase","triggerOpenChatWindow","triggerCloseChatWindow","triggerToggleChatWindowVisibility","triggerNativeFileUpload","nativeFileInput","click","onFileChosen","files","fileMessage","Component","args","selector","template","DomSanitizer","HttpClient","Input","Output","ViewChildren","ViewChild","HostListener","emojiDictionary","patterns","unicode","EmojifyPipe","transform","pipeEnabled","emoji","pattern","replace","Pipe","LinkfyPipe","replacePatternProtocol","replacePatternWWW","replacePatternMailTo","NgChatModule","NgModule","imports","CommonModule","FormsModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { Message } from \"./message\";\r\nimport { User } from \"./user\";\r\n\r\nexport abstract class ChatAdapter\r\n{\r\n    // ### Abstract adapter methods ###\r\n\r\n    public abstract listFriends(): Observable<User[]>;\r\n    \r\n    public abstract getMessageHistory(userId: any): Observable<Message[]>;\r\n\r\n    public abstract sendMessage(message: Message): void;\r\n\r\n    // ### Adapter/Chat income/ingress events ###\r\n\r\n    public onFriendsListChanged(users: User[]): void\r\n    {\r\n        this.friendsListChangedHandler(users);\r\n    }\r\n\r\n    public onMessageReceived(user: User, message: Message): void\r\n    {\r\n        this.messageReceivedHandler(user, message);\r\n    }\r\n    \r\n    // Event handlers\r\n    friendsListChangedHandler: (users: User[]) => void  = (users: User[]) => {};\r\n    messageReceivedHandler: (user: User, message: Message) => void = (user: User, message: Message) => {};\r\n}\r\n","export enum MessageType\r\n{\r\n    Text = 1,\r\n    File = 2\r\n}\r\n","import { MessageType } from './message-type.enum';\r\n\r\nexport class Message\r\n{\r\n    public type?: MessageType = MessageType.Text;\r\n    public fromId: any;\r\n    public toId: any;\r\n    public message: string;\r\n    public seenOn?: Date;\r\n}\r\n","export enum UserStatus\r\n{\r\n    Online,\r\n    Busy,\r\n    Away,\r\n    Offline\r\n}","import { UserStatus } from \"./user-status.enum\";\r\n\r\nexport class User\r\n{\r\n    public id: any;\r\n    public displayName: string;\r\n    public status: UserStatus;\r\n    public avatar: string;\r\n}","import { Message } from \"./message\";\r\nimport { User } from \"./user\";\r\n\r\nexport class Window\r\n{\r\n    public chattingTo: User;\r\n    public messages: Message[] = [];\r\n    public newMessage?: string = \"\";\r\n    \r\n    // UI Behavior properties\r\n    public isCollapsed?: boolean = false; \r\n    public isLoadingHistory: boolean = false;\r\n    public hasFocus: boolean = false;\r\n    public hasMoreMessages: boolean = true;\r\n    public historyPage: number = 0;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { Message } from \"./message\";\r\nimport { User } from \"./user\";\r\nimport { ChatAdapter } from \"./chat-adapter\";\r\n\r\n/**\r\n * @description Chat Adapter decorator class that adds pagination to load the history of messagesr. \r\n * You will need an existing @see ChatAdapter implementation\r\n */\r\nexport abstract class PagedHistoryChatAdapter extends ChatAdapter\r\n{   \r\n    abstract getMessageHistoryByPage(userId: any, size: number, page: number) : Observable<Message[]>;\r\n}\r\n","export enum Theme\r\n{\r\n    Custom = 'custom-theme',\r\n    Light = 'light-theme',\r\n    Dark = 'dark-theme'\r\n}\r\n","export enum ScrollDirection {\r\n    Top,\r\n    Bottom\r\n}","import { IFileUploadAdapter } from './file-upload-adapter';\r\nimport { HttpClient, HttpRequest, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { User } from './user';\r\nimport { Message } from './message';\r\n\r\nexport class DefaultFileUploadAdapter implements IFileUploadAdapter\r\n{\r\n    /**\r\n     * @summary Basic file upload adapter implementation for HTTP request form file consumption\r\n     * @param _serverEndpointUrl The API endpoint full qualified address that will receive a form file to process and return the metadata.\r\n     */\r\n    constructor(private _serverEndpointUrl: string, private _http: HttpClient) {\r\n    }\r\n\r\n    uploadFile(file: File, userTo: User): Observable<Message> {\r\n        const formData: FormData = new FormData();\r\n\r\n        //formData.append('ng-chat-sender-userid', currentUserId);\r\n        formData.append('ng-chat-destinatary-userid', userTo.id);\r\n        formData.append('file', file, file.name);\r\n\r\n        return this._http.post<Message>(this._serverEndpointUrl, formData);\r\n\r\n        // TODO: Leaving this if we want to track upload progress in detail in the future. Might need a different Subject generic type wrapper\r\n        // const fileRequest = new HttpRequest('POST', this._serverEndpointUrl, formData, {\r\n        //     reportProgress: true\r\n        // });\r\n\r\n        // const uploadProgress = new Subject<number>();\r\n        // const uploadStatus = uploadProgress.asObservable();\r\n\r\n        //const responsePromise = new Subject<Message>();\r\n\r\n        // this._http\r\n        //     .request(fileRequest)\r\n        //     .subscribe(event => {\r\n        //         // if (event.type == HttpEventType.UploadProgress)\r\n        //         // {\r\n        //         //     const percentDone = Math.round(100 * event.loaded / event.total);\r\n\r\n        //         //     uploadProgress.next(percentDone);\r\n        //         // }\r\n        //         // else if (event instanceof HttpResponse)\r\n        //         // {\r\n                    \r\n        //         //     uploadProgress.complete();\r\n        //         // }\r\n        //     });\r\n    }\r\n}\r\n","import { Component, Input, OnInit, ViewChildren, ViewChild, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\nimport { ChatAdapter } from './core/chat-adapter';\r\nimport { User } from \"./core/user\";\r\nimport { Message } from \"./core/message\";\r\nimport { FileMessage } from \"./core/file-message\";\r\nimport { MessageType } from \"./core/message-type.enum\";\r\nimport { Window } from \"./core/window\";\r\nimport { UserStatus } from \"./core/user-status.enum\";\r\nimport { ScrollDirection } from \"./core/scroll-direction.enum\";\r\nimport { Localization, StatusDescription } from './core/localization';\r\nimport { IChatController } from './core/chat-controller';\r\nimport { PagedHistoryChatAdapter } from './core/paged-history-chat-adapter';\r\nimport { IFileUploadAdapter } from './core/file-upload-adapter';\r\nimport { DefaultFileUploadAdapter } from './core/default-file-upload-adapter';\r\nimport { Theme } from './core/theme.enum';\r\n\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'ng-chat',\r\n    templateUrl: 'ng-chat.component.html',\r\n    styleUrls: [\r\n        'assets/icons.css',\r\n        'assets/loading-spinner.css',\r\n        'assets/ng-chat.component.default.css',\r\n        'assets/themes/ng-chat.theme.default.scss',\r\n        'assets/themes/ng-chat.theme.dark.scss'\r\n    ],\r\n})\r\n\r\nexport class NgChat implements OnInit, IChatController {\r\n    constructor(public sanitizer: DomSanitizer, private _httpClient: HttpClient) { }\r\n\r\n    // Exposes enums for the ng-template\r\n    public UserStatus = UserStatus;\r\n    public MessageType = MessageType;\r\n\r\n    @Input()\r\n    public adapter: ChatAdapter;\r\n\r\n    @Input()\r\n    public userId: any;\r\n\r\n    @Input()\r\n    public isCollapsed: boolean = false;\r\n\r\n    @Input()\r\n    public maximizeWindowOnNewMessage: boolean = true;\r\n\r\n    @Input()    \r\n    public pollFriendsList: boolean = false;\r\n\r\n    @Input()\r\n    public pollingInterval: number = 5000;\r\n\r\n    @Input()    \r\n    public historyEnabled: boolean = true;\r\n\r\n    @Input()    \r\n    public emojisEnabled: boolean = true;\r\n\r\n    @Input()    \r\n    public linkfyEnabled: boolean = true;\r\n\r\n    @Input()\r\n    public audioEnabled: boolean = true;\r\n\r\n    @Input()\r\n    public searchEnabled: boolean = true;\r\n\r\n    @Input() // TODO: This might need a better content strategy\r\n    public audioSource: string = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.wav';\r\n\r\n    @Input()\r\n    public persistWindowsState: boolean = true;\r\n\r\n    @Input()\r\n    public title: string = \"Friends\";\r\n\r\n    @Input()\r\n    public messagePlaceholder: string = \"Type a message\";\r\n\r\n    @Input()\r\n    public searchPlaceholder: string = \"Search\";\r\n\r\n    @Input()\r\n    public browserNotificationsEnabled: boolean = true;\r\n\r\n    @Input() // TODO: This might need a better content strategy\r\n    public browserNotificationIconSource: string = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.png';\r\n\r\n    @Input()\r\n    public browserNotificationTitle: string = \"New message from\";\r\n    \r\n    @Input()\r\n    public historyPageSize: number = 10;\r\n\r\n    @Input()\r\n    public localization: Localization;\r\n\r\n    @Input()\r\n    public hideFriendsList: boolean = false;\r\n\r\n    @Input()\r\n    public hideFriendsListOnUnsupportedViewport: boolean = true;\r\n\r\n    @Input()\r\n    public fileUploadUrl: string;\r\n\r\n    @Input()\r\n    public theme: Theme = Theme.Light;\r\n\r\n    @Input()\r\n    public customTheme: string;\r\n\r\n    @Output()\r\n    public onUserClicked: EventEmitter<User> = new EventEmitter<User>();\r\n\r\n    @Output()\r\n    public onUserChatOpened: EventEmitter<User> = new EventEmitter<User>();\r\n\r\n    @Output()\r\n    public onUserChatClosed: EventEmitter<User> = new EventEmitter<User>();\r\n    \r\n    @Output()\r\n    public onMessagesSeen: EventEmitter<Message[]> = new EventEmitter<Message[]>();\r\n\r\n    private browserNotificationsBootstrapped: boolean = false;\r\n\r\n    public hasPagedHistory: boolean = false;\r\n\r\n    // Don't want to add this as a setting to simplify usage. Previous placeholder and title settings available to be used, or use full Localization object.\r\n    private statusDescription: StatusDescription = {\r\n        online: 'Online',\r\n        busy: 'Busy',\r\n        away: 'Away',\r\n        offline: 'Offline'\r\n    };\r\n\r\n    private audioFile: HTMLAudioElement;\r\n\r\n    public searchInput: string = '';\r\n\r\n    protected users: User[];\r\n\r\n    private get localStorageKey(): string \r\n    {\r\n        return `ng-chat-users-${this.userId}`; // Appending the user id so the state is unique per user in a computer.   \r\n    }; \r\n\r\n    get filteredUsers(): User[]\r\n    {\r\n        if (this.searchInput.length > 0){\r\n            // Searches in the friend list by the inputted search string\r\n            return this.users.filter(x => x.displayName.toUpperCase().includes(this.searchInput.toUpperCase()));\r\n        }\r\n\r\n        return this.users;\r\n    }\r\n\r\n    // Defines the size of each opened window to calculate how many windows can be opened on the viewport at the same time.\r\n    public windowSizeFactor: number = 320;\r\n\r\n    // Total width size of the friends list section\r\n    public friendsListWidth: number = 262;\r\n\r\n    // Available area to render the plugin\r\n    private viewPortTotalArea: number;\r\n    \r\n    // Set to true if there is no space to display at least one chat window and 'hideFriendsListOnUnsupportedViewport' is true\r\n    public unsupportedViewport: boolean = false;\r\n\r\n    // File upload state\r\n    public isUploadingFile = false;\r\n    public fileUploadAdapter: IFileUploadAdapter;\r\n\r\n    windows: Window[] = [];\r\n\r\n    isBootstrapped: boolean = false;\r\n\r\n    @ViewChildren('chatMessages') chatMessageClusters: any;\r\n\r\n    @ViewChildren('chatWindowInput') chatWindowInputs: any;\r\n\r\n    @ViewChild('nativeFileInput') nativeFileInput: ElementRef;\r\n\r\n    ngOnInit() { \r\n        this.bootstrapChat();\r\n    }\r\n\r\n    @HostListener('window:resize', ['$event'])\r\n    onResize(event: any){\r\n       this.viewPortTotalArea = event.target.innerWidth;\r\n\r\n       this.NormalizeWindows();\r\n    }\r\n\r\n    // Checks if there are more opened windows than the view port can display\r\n    private NormalizeWindows(): void\r\n    {\r\n        let maxSupportedOpenedWindows = Math.floor((this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) / this.windowSizeFactor);\r\n        let difference = this.windows.length - maxSupportedOpenedWindows;\r\n\r\n        if (difference >= 0){\r\n            this.windows.splice(this.windows.length - difference);\r\n        }\r\n\r\n        this.updateWindowsState(this.windows);\r\n\r\n        // Viewport should have space for at least one chat window.\r\n        this.unsupportedViewport = this.hideFriendsListOnUnsupportedViewport && maxSupportedOpenedWindows < 1;\r\n    }\r\n\r\n    // Initializes the chat plugin and the messaging adapter\r\n    private bootstrapChat(): void\r\n    {\r\n        let initializationException = null;\r\n\r\n        if (this.adapter != null && this.userId != null)\r\n        {\r\n            try\r\n            {\r\n                this.viewPortTotalArea = window.innerWidth;\r\n\r\n                this.initializeTheme();\r\n                this.initializeDefaultText();\r\n                this.initializeBrowserNotifications();\r\n\r\n                // Binding event listeners\r\n                this.adapter.messageReceivedHandler = (user, msg) => this.onMessageReceived(user, msg);\r\n                this.adapter.friendsListChangedHandler = (users) => this.onFriendsListChanged(users);\r\n\r\n                // Loading current users list\r\n                if (this.pollFriendsList){\r\n                    // Setting a long poll interval to update the friends list\r\n                    this.fetchFriendsList(true);\r\n                    setInterval(() => this.fetchFriendsList(false), this.pollingInterval);\r\n                }\r\n                else\r\n                {\r\n                    // Since polling was disabled, a friends list update mechanism will have to be implemented in the ChatAdapter.\r\n                    this.fetchFriendsList(true);\r\n                }\r\n                \r\n                this.bufferAudioFile();\r\n\r\n                this.hasPagedHistory = this.adapter instanceof PagedHistoryChatAdapter;\r\n                \r\n                if (this.fileUploadUrl && this.fileUploadUrl !== \"\")\r\n                {\r\n                    this.fileUploadAdapter = new DefaultFileUploadAdapter(this.fileUploadUrl, this._httpClient);\r\n                }\r\n\r\n                this.isBootstrapped = true;\r\n            }\r\n            catch(ex)\r\n            {\r\n                initializationException = ex;\r\n            }\r\n        }\r\n\r\n        if (!this.isBootstrapped){\r\n            console.error(\"ng-chat component couldn't be bootstrapped.\");\r\n            \r\n            if (this.userId == null){\r\n                console.error(\"ng-chat can't be initialized without an user id. Please make sure you've provided an userId as a parameter of the ng-chat component.\");\r\n            }\r\n            if (this.adapter == null){\r\n                console.error(\"ng-chat can't be bootstrapped without a ChatAdapter. Please make sure you've provided a ChatAdapter implementation as a parameter of the ng-chat component.\");\r\n            }\r\n            if (initializationException)\r\n            {\r\n                console.error(`An exception has occurred while initializing ng-chat. Details: ${initializationException.message}`);\r\n                console.error(initializationException);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Initializes browser notifications\r\n    private async initializeBrowserNotifications()\r\n    {\r\n        if (this.browserNotificationsEnabled && (\"Notification\" in window))\r\n        {\r\n            if (await Notification.requestPermission())\r\n            {\r\n                this.browserNotificationsBootstrapped = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Initializes default text\r\n    private initializeDefaultText() : void\r\n    {\r\n        if (!this.localization)\r\n        {\r\n            this.localization = {\r\n                messagePlaceholder: this.messagePlaceholder,\r\n                searchPlaceholder: this.searchPlaceholder, \r\n                title: this.title,\r\n                statusDescription: this.statusDescription,\r\n                browserNotificationTitle: this.browserNotificationTitle,\r\n                loadMessageHistoryPlaceholder: \"Load older messages\"\r\n            };\r\n        }\r\n    }\r\n\r\n    private initializeTheme(): void\r\n    {\r\n        if (this.customTheme)\r\n        {\r\n            this.theme = Theme.Custom;\r\n        }\r\n        else if (this.theme != Theme.Light && this.theme != Theme.Dark)\r\n        {\r\n            // TODO: Use es2017 in future with Object.values(Theme).includes(this.theme) to do this check\r\n            throw new Error(`Invalid theme configuration for ng-chat. \"${this.theme}\" is not a valid theme value.`);\r\n        }\r\n    }\r\n\r\n    // Sends a request to load the friends list\r\n    private fetchFriendsList(isBootstrapping: boolean): void\r\n    {\r\n        this.adapter.listFriends()\r\n        .pipe(\r\n            map((users: User[]) => {\r\n                this.users = users;\r\n            })\r\n        ).subscribe(() => {\r\n            if (isBootstrapping)\r\n            {\r\n                this.restoreWindowsState();\r\n            }\r\n        });\r\n    }\r\n\r\n    fetchMessageHistory(window: Window) {\r\n        // Not ideal but will keep this until we decide if we are shipping pagination with the default adapter\r\n        if (this.adapter instanceof PagedHistoryChatAdapter)\r\n        {\r\n            window.isLoadingHistory = true;\r\n\r\n            this.adapter.getMessageHistoryByPage(window.chattingTo.id, this.historyPageSize, ++window.historyPage)\r\n            .pipe(\r\n                map((result: Message[]) => {\r\n                    result.forEach((message) => this.assertMessageType(message));\r\n                    \r\n                    window.messages = result.concat(window.messages);\r\n                    window.isLoadingHistory = false;\r\n    \r\n                    const direction: ScrollDirection = (window.historyPage == 1) ? ScrollDirection.Bottom : ScrollDirection.Top;\r\n                    window.hasMoreMessages = result.length == this.historyPageSize;\r\n                    \r\n                    setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, direction, true));\r\n                })\r\n            ).subscribe();\r\n        }\r\n        else\r\n        {\r\n            this.adapter.getMessageHistory(window.chattingTo.id)\r\n            .pipe(\r\n                map((result: Message[]) => {\r\n                    result.forEach((message) => this.assertMessageType(message));\r\n    \r\n                    window.messages = result.concat(window.messages);\r\n                    window.isLoadingHistory = false;\r\n    \r\n                    setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, ScrollDirection.Bottom));\r\n                })\r\n            ).subscribe();\r\n        }\r\n    }\r\n\r\n    private onFetchMessageHistoryLoaded(messages: Message[], window: Window, direction: ScrollDirection, forceMarkMessagesAsSeen: boolean = false): void \r\n    {\r\n        this.scrollChatWindow(window, direction)\r\n\r\n        if (window.hasFocus || forceMarkMessagesAsSeen)\r\n        {\r\n            const unseenMessages = messages.filter(m => !m.seenOn);\r\n\r\n            this.markMessagesAsRead(unseenMessages);\r\n            this.onMessagesSeen.emit(unseenMessages);\r\n        }\r\n    }\r\n\r\n    // Updates the friends list via the event handler\r\n    private onFriendsListChanged(users: User[]): void\r\n    {\r\n        if (users) \r\n        {\r\n            this.users = users;\r\n        }\r\n    }\r\n\r\n    // Handles received messages by the adapter\r\n    private onMessageReceived(user: User, message: Message)\r\n    {\r\n        if (user && message)\r\n        {\r\n            let chatWindow = this.openChatWindow(user);\r\n\r\n            this.assertMessageType(message);\r\n\r\n            if (!chatWindow[1] || !this.historyEnabled){\r\n                chatWindow[0].messages.push(message);\r\n\r\n                this.scrollChatWindow(chatWindow[0], ScrollDirection.Bottom);\r\n\r\n                if (chatWindow[0].hasFocus)\r\n                {\r\n                    this.markMessagesAsRead([message]);\r\n                    this.onMessagesSeen.emit([message]);\r\n                }\r\n            }\r\n\r\n            this.emitMessageSound(chatWindow[0]);\r\n            \r\n            // Github issue #58 \r\n            // Do not push browser notifications with message content for privacy purposes if the 'maximizeWindowOnNewMessage' setting is off and this is a new chat window.\r\n            if (this.maximizeWindowOnNewMessage || (!chatWindow[1] && !chatWindow[0].isCollapsed))\r\n            { \r\n                // Some messages are not pushed because they are loaded by fetching the history hence why we supply the message here\r\n                this.emitBrowserNotification(chatWindow[0], message);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Opens a new chat whindow. Takes care of available viewport\r\n    // Returns => [Window: Window object reference, boolean: Indicates if this window is a new chat window]\r\n    public openChatWindow(user: User, focusOnNewWindow: boolean = false, invokedByUserClick: boolean = false): [Window, boolean]\r\n    {\r\n        // Is this window opened?\r\n        let openedWindow = this.windows.find(x => x.chattingTo.id == user.id);\r\n\r\n        if (!openedWindow)\r\n        {\r\n            if (invokedByUserClick) \r\n            {\r\n                this.onUserClicked.emit(user);\r\n            }\r\n\r\n            // Refer to issue #58 on Github \r\n            let collapseWindow = invokedByUserClick ? false : !this.maximizeWindowOnNewMessage;\r\n\r\n            let newChatWindow: Window = {\r\n                chattingTo: user,\r\n                messages:  [],\r\n                isLoadingHistory: this.historyEnabled,\r\n                hasFocus: false, // This will be triggered when the 'newMessage' input gets the current focus\r\n                isCollapsed: collapseWindow,\r\n                hasMoreMessages: false,\r\n                historyPage: 0\r\n            };\r\n\r\n            // Loads the chat history via an RxJs Observable\r\n            if (this.historyEnabled)\r\n            {\r\n                this.fetchMessageHistory(newChatWindow);\r\n            }\r\n\r\n            this.windows.unshift(newChatWindow);\r\n\r\n            // Is there enough space left in the view port ?\r\n            if (this.windows.length * this.windowSizeFactor >= this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0))\r\n            {                \r\n                this.windows.pop();\r\n            }\r\n\r\n            this.updateWindowsState(this.windows);\r\n            \r\n            if (focusOnNewWindow && !collapseWindow) \r\n            {\r\n                this.focusOnWindow(newChatWindow);\r\n            }\r\n            \r\n            this.onUserChatOpened.emit(user);\r\n\r\n            return [newChatWindow, true];\r\n        }\r\n        else\r\n        {\r\n            // Returns the existing chat window     \r\n            return [openedWindow, false];       \r\n        }\r\n    }\r\n\r\n    // Focus on the input element of the supplied window\r\n    private focusOnWindow(window: Window, callback: Function = () => {}) : void\r\n    {\r\n        let windowIndex = this.windows.indexOf(window);\r\n        if (windowIndex >= 0)\r\n        {\r\n            setTimeout(() => {\r\n                if (this.chatWindowInputs)\r\n                {\r\n                    let messageInputToFocus = this.chatWindowInputs.toArray()[windowIndex];\r\n                \r\n                    messageInputToFocus.nativeElement.focus(); \r\n                }\r\n\r\n                callback(); \r\n            });\r\n        } \r\n    }\r\n\r\n    // Scrolls a chat window message flow to the bottom\r\n    private scrollChatWindow(window: Window, direction: ScrollDirection): void\r\n    {\r\n        if (!window.isCollapsed){\r\n            let windowIndex = this.windows.indexOf(window);\r\n            setTimeout(() => {\r\n                if (this.chatMessageClusters){\r\n                    let targetWindow = this.chatMessageClusters.toArray()[windowIndex];\r\n\r\n                    if (targetWindow)\r\n                    {\r\n                        let element = this.chatMessageClusters.toArray()[windowIndex].nativeElement;\r\n                        let position = ( direction === ScrollDirection.Top ) ? 0 : element.scrollHeight;\r\n                        element.scrollTop = position;\r\n                    }\r\n                }\r\n            }); \r\n        }\r\n    }\r\n\r\n    // Marks all messages provided as read with the current time.\r\n    public markMessagesAsRead(messages: Message[]): void\r\n    {\r\n        let currentDate = new Date();\r\n\r\n        messages.forEach((msg)=>{\r\n            msg.seenOn = currentDate;\r\n        });\r\n    }\r\n\r\n    // Buffers audio file (For component's bootstrapping)\r\n    private bufferAudioFile(): void {\r\n        if (this.audioSource && this.audioSource.length > 0)\r\n        {\r\n            this.audioFile = new Audio();\r\n            this.audioFile.src = this.audioSource;\r\n            this.audioFile.load();\r\n        }\r\n    }\r\n\r\n    // Emits a message notification audio if enabled after every message received\r\n    private emitMessageSound(window: Window): void\r\n    {\r\n        if (this.audioEnabled && !window.hasFocus && this.audioFile) {\r\n            this.audioFile.play();\r\n        }\r\n    }\r\n\r\n    // Emits a browser notification\r\n    private emitBrowserNotification(window: Window, message: Message): void\r\n    {       \r\n        if (this.browserNotificationsBootstrapped && !window.hasFocus && message) {\r\n            let notification = new Notification(`${this.localization.browserNotificationTitle} ${window.chattingTo.displayName}`, {\r\n                'body': message.message,\r\n                'icon': this.browserNotificationIconSource\r\n            });\r\n\r\n            setTimeout(() => {\r\n                notification.close();\r\n            }, message.message.length <= 50 ? 5000 : 7000); // More time to read longer messages\r\n        }\r\n    }\r\n\r\n    // Saves current windows state into local storage if persistence is enabled\r\n    private updateWindowsState(windows: Window[]): void\r\n    {\r\n        if (this.persistWindowsState)\r\n        {\r\n            let usersIds = windows.map((w) => {\r\n                return w.chattingTo.id;\r\n            });\r\n\r\n            localStorage.setItem(this.localStorageKey, JSON.stringify(usersIds));\r\n        }\r\n    }\r\n\r\n    private restoreWindowsState(): void\r\n    {\r\n        try\r\n        {\r\n            if (this.persistWindowsState)\r\n            {\r\n                let stringfiedUserIds = localStorage.getItem(this.localStorageKey);\r\n\r\n                if (stringfiedUserIds && stringfiedUserIds.length > 0)\r\n                {\r\n                    let userIds = <number[]>JSON.parse(stringfiedUserIds);\r\n\r\n                    let usersToRestore = this.users.filter(u => userIds.indexOf(u.id) >= 0);\r\n\r\n                    usersToRestore.forEach((user) => {\r\n                        this.openChatWindow(user);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        catch (ex)\r\n        {\r\n            console.error(`An error occurred while restoring ng-chat windows state. Details: ${ex}`);\r\n        }\r\n    }\r\n\r\n    // Gets closest open window if any. Most recent opened has priority (Right)\r\n    private getClosestWindow(window: Window): Window | undefined\r\n    {   \r\n        let index = this.windows.indexOf(window);\r\n\r\n        if (index > 0)\r\n        {\r\n            return this.windows[index - 1];\r\n        }\r\n        else if (index == 0 && this.windows.length > 1)\r\n        {   \r\n            return this.windows[index + 1];\r\n        }\r\n    }\r\n\r\n    private assertMessageType(message: Message): void {\r\n        // Always fallback to \"Text\" messages to avoid rendenring issues\r\n        if (!message.type)\r\n        {\r\n            message.type = MessageType.Text;\r\n        }\r\n    }\r\n\r\n    // Returns the total unread messages from a chat window. TODO: Could use some Angular pipes in the future \r\n    unreadMessagesTotal(window: Window): string\r\n    {\r\n        if (window){\r\n            let totalUnreadMessages = window.messages.filter(x => x.fromId != this.userId && !x.seenOn).length;\r\n            \r\n            if (totalUnreadMessages > 0){\r\n\r\n                if (totalUnreadMessages > 99) \r\n                    return  \"99+\";\r\n                else\r\n                    return String(totalUnreadMessages); \r\n            }\r\n        }\r\n            \r\n        // Empty fallback.\r\n        return \"\";\r\n    }\r\n\r\n    unreadMessagesTotalByUser(user: User): string\r\n    {\r\n        let openedWindow = this.windows.find(x => x.chattingTo.id == user.id);\r\n\r\n        if (openedWindow){\r\n            return this.unreadMessagesTotal(openedWindow);\r\n        }\r\n            \r\n        // Empty fallback.\r\n        return \"\";\r\n    }\r\n\r\n    /*  Monitors pressed keys on a chat window\r\n        - Dispatches a message when the ENTER key is pressed\r\n        - Tabs between windows on TAB or SHIFT + TAB\r\n        - Closes the current focused window on ESC\r\n    */\r\n    onChatInputTyped(event: any, window: Window): void\r\n    {\r\n        switch (event.keyCode)\r\n        {\r\n            case 13:\r\n                if (window.newMessage && window.newMessage.trim() != \"\")\r\n                {\r\n                    let message = new Message();\r\n             \r\n                    message.fromId = this.userId;\r\n                    message.toId = window.chattingTo.id;\r\n                    message.message = window.newMessage;\r\n        \r\n                    window.messages.push(message);\r\n        \r\n                    this.adapter.sendMessage(message);\r\n        \r\n                    window.newMessage = \"\"; // Resets the new message input\r\n        \r\n                    this.scrollChatWindow(window, ScrollDirection.Bottom);\r\n                }\r\n                break;\r\n            case 9:\r\n                event.preventDefault();\r\n                \r\n                let currentWindowIndex = this.windows.indexOf(window);\r\n                let messageInputToFocus = this.chatWindowInputs.toArray()[currentWindowIndex + (event.shiftKey ? 1 : -1)]; // Goes back on shift + tab\r\n\r\n                if (!messageInputToFocus)\r\n                {\r\n                    // Edge windows, go to start or end\r\n                    messageInputToFocus = this.chatWindowInputs.toArray()[currentWindowIndex > 0 ? 0 : this.chatWindowInputs.length - 1]; \r\n                }\r\n\r\n                messageInputToFocus.nativeElement.focus();\r\n\r\n                break;\r\n            case 27:\r\n                let closestWindow = this.getClosestWindow(window);\r\n\r\n                if (closestWindow)\r\n                {\r\n                    this.focusOnWindow(closestWindow, () => { this.onCloseChatWindow(window); });\r\n                }\r\n                else\r\n                {\r\n                    this.onCloseChatWindow(window);\r\n                }\r\n        }\r\n    }\r\n\r\n    // Closes a chat window via the close 'X' button\r\n    onCloseChatWindow(window: Window): void \r\n    {\r\n        let index = this.windows.indexOf(window);\r\n\r\n        this.windows.splice(index, 1);\r\n\r\n        this.updateWindowsState(this.windows);\r\n\r\n        this.onUserChatClosed.emit(window.chattingTo);\r\n    }\r\n\r\n    // Toggle friends list visibility\r\n    onChatTitleClicked(event: any): void\r\n    {\r\n        this.isCollapsed = !this.isCollapsed;\r\n    }\r\n\r\n    // Toggles a chat window visibility between maximized/minimized\r\n    onChatWindowClicked(window: Window): void\r\n    {\r\n        window.isCollapsed = !window.isCollapsed;\r\n        this.scrollChatWindow(window, ScrollDirection.Bottom);\r\n    }\r\n\r\n    // Asserts if a user avatar is visible in a chat cluster\r\n    isAvatarVisible(window: Window, message: Message, index: number): boolean\r\n    {\r\n        if (message.fromId != this.userId){\r\n            if (index == 0){\r\n                return true; // First message, good to show the thumbnail\r\n            }\r\n            else{\r\n                // Check if the previous message belongs to the same user, if it belongs there is no need to show the avatar again to form the message cluster\r\n                if (window.messages[index - 1].fromId != message.fromId){\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Toggles a window focus on the focus/blur of a 'newMessage' input\r\n    toggleWindowFocus(window: Window): void\r\n    {\r\n        window.hasFocus = !window.hasFocus;\r\n        if(window.hasFocus) {\r\n            const unreadMessages = window.messages.filter(message => message.seenOn == null && message.toId == this.userId);\r\n            \r\n            if (unreadMessages && unreadMessages.length > 0)\r\n            {\r\n                this.markMessagesAsRead(unreadMessages);\r\n                this.onMessagesSeen.emit(unreadMessages);\r\n            }\r\n        }\r\n    }\r\n\r\n    // [Localized] Returns the status descriptive title\r\n    getStatusTitle(status: UserStatus) : any\r\n    {\r\n        let currentStatus = status.toString().toLowerCase();\r\n\r\n        return this.localization.statusDescription[currentStatus];\r\n    }\r\n\r\n    triggerOpenChatWindow(user: User): void {\r\n        if (user)\r\n        {\r\n            this.openChatWindow(user);\r\n        }\r\n    }\r\n\r\n    triggerCloseChatWindow(userId: any): void {\r\n        let openedWindow = this.windows.find(x => x.chattingTo.id == userId);\r\n\r\n        if (openedWindow){\r\n            this.onCloseChatWindow(openedWindow);\r\n        }\r\n    }\r\n\r\n    triggerToggleChatWindowVisibility(userId: any): void {\r\n        let openedWindow = this.windows.find(x => x.chattingTo.id == userId);\r\n\r\n        if (openedWindow){\r\n            this.onChatWindowClicked(openedWindow);\r\n        }\r\n    }\r\n\r\n    // Triggers native file upload for file selection from the user\r\n    triggerNativeFileUpload(): void\r\n    {\r\n        this.nativeFileInput.nativeElement.click();\r\n    }\r\n\r\n    // Handles file selection and uploads the selected file using the file upload adapter\r\n    onFileChosen(window: Window): void {\r\n        const file: File = this.nativeFileInput.nativeElement.files[0];\r\n\r\n        this.isUploadingFile = true;\r\n\r\n        // TODO: Handle failure\r\n        this.fileUploadAdapter.uploadFile(file, window.chattingTo)\r\n            .subscribe(fileMessage => {\r\n                this.isUploadingFile = false;\r\n\r\n                fileMessage.fromId = this.userId;\r\n\r\n                // Push file message to current user window   \r\n                window.messages.push(fileMessage);\r\n    \r\n                this.adapter.sendMessage(fileMessage);\r\n    \r\n                this.scrollChatWindow(window, ScrollDirection.Bottom);\r\n\r\n                // Resets the file upload element\r\n                this.nativeFileInput.nativeElement.value = '';\r\n            });\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nlet emojiDictionary = [\r\n    { patterns: [':)', ':-)', '=)'], unicode: 'ð' },\r\n    { patterns: [':D', ':-D', '=D'], unicode: 'ð' },\r\n    { patterns: [':(', ':-(', '=('], unicode: 'ð' },\r\n    { patterns: [':|', ':-|', '=|'], unicode: 'ð' },\r\n    { patterns: [':*', ':-*', '=*'], unicode: 'ð' },\r\n    { patterns: ['T_T', 'T.T'], unicode: 'ð­' },\r\n    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: 'ð®' },\r\n    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: 'ð' },\r\n    { patterns: ['>.<'], unicode: 'ð£' },\r\n    { patterns: ['@.@'], unicode: 'ðµ' },\r\n    { patterns: ['*.*'], unicode: 'ð' },\r\n    { patterns: ['<3'], unicode: 'â¤ï¸' },\r\n    { patterns: ['^.^'], unicode: 'ð' },\r\n    { patterns: [':+1'], unicode: 'ð' },\r\n    { patterns: [':-1'], unicode: 'ð' }\r\n];\r\n\r\n/*\r\n * Transforms common emoji text to UTF encoded emojis\r\n*/\r\n@Pipe({name: 'emojify'})\r\nexport class EmojifyPipe implements PipeTransform {\r\n    transform(message: string, pipeEnabled: boolean): string {\r\n        if (pipeEnabled && message && message.length > 1) {  \r\n            emojiDictionary.forEach(emoji => {\r\n                emoji.patterns.forEach(pattern => {\r\n                    message = message.replace(pattern, emoji.unicode);\r\n                })\r\n            });\r\n        }\r\n\r\n    return message;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transforms text containing URLs or E-mails to valid links/mailtos\r\n*/\r\n@Pipe({name: 'linkfy'})\r\nexport class LinkfyPipe implements PipeTransform {\r\n    transform(message: string, pipeEnabled: boolean): string {\r\n        if (pipeEnabled && message && message.length > 1)\r\n        {\r\n            let replacedText;\r\n            let replacePatternProtocol;\r\n            let replacePatternWWW;\r\n            let replacePatternMailTo;\r\n\r\n            // URLs starting with http://, https://, or ftp://\r\n            replacePatternProtocol = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\r\n            replacedText = message.replace(replacePatternProtocol, '<a href=\"$1\" target=\"_blank\">$1</a>');\r\n\r\n            // URLs starting with \"www.\" (ignoring // before it).\r\n            replacePatternWWW = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n            replacedText = replacedText.replace(replacePatternWWW, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\r\n\r\n            // Change email addresses to mailto:: links.\r\n            replacePatternMailTo = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\r\n            replacedText = replacedText.replace(replacePatternMailTo, '<a href=\"mailto:$1\">$1</a>');\r\n\r\n            return replacedText;\r\n        }\r\n        else\r\n            return message;\r\n    } \r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { NgChat } from './ng-chat.component';\r\nimport { EmojifyPipe } from './pipes/emojify.pipe';\r\nimport { LinkfyPipe } from './pipes/linkfy.pipe';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, HttpClientModule],\r\n  declarations: [NgChat, EmojifyPipe, LinkfyPipe],\r\n  exports: [NgChat]\r\n})\r\nexport class NgChatModule {\r\n}\r\n"]}